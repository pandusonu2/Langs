in js/app.js
var app=angular.module("myApp",[]);
^Creating module names myApp

in index.html
<body ng-app="myApp">
^directive

in js/controllers/MainController.js
app.controller('MainController', ['$scope', function($scope) { 
  $scope.title = 'Top Sellers in Books'; 
}]);
^manages app's data, we use property title to store value and attach it to scope

in index.html
<div class="main" ng-controller="MainController">
^directive

{{var | currenct}} #AngularJS filer
https://docs.angularjs.org/api/ng/filter

A module contains the different components of an AngularJS app
A controller manages the app's data
An expression displays values on the page
A filter formats the value of an expression

<div ng-repeat="product in products">
<img ng-src="{{products.cover}}">

<div class="rating">
<p class="likes" ng-click="plusOne($index)">+ {{ product.likes }} </p>
</div>
$scope.plusOne = function(index) { 
  	$scope.products[index].likes += 1; 
};

in js/directives/appInfo.js
app.directive('appInfo', function() {
  return {
    restrict: 'E',		\\specifies how the directive will be used in the view. The 'E' means it will be used as a new HTML element.
    scope: {				//specifies that we will pass information into this directive through an attribute named info. The = tells the directive to look for an attribute named info in the <app-info> element
      info: '='
    },
    templateUrl:
    'js/directives/appInfo.html'		//specifies the HTML to use in order to display the data in scope.info. Here we use the HTML in js/directives/appInfo.html.

  };
});

Then in index.html we use the new directive as the HTML element <app-info>. We pass in objects from the controller's scope ($scope.shutterbugg) into the <app-info> element's info attribute so that it displays.

include appInfo.js in index.html body
It should have three included, Modules, Controllers and Directives

in js/directives/appInfo.html
<img class="icon" ng-src="{{ info.icon }}">
<h2 class="title">{{ info.title }}</h2>
<p class="developer">{{ info.developer }}</p>
<p class="price">{{ info.price | currency }}</p>

replace the instance of above 4 lines in index.html with <app-info info="move"></app-info>

Similarly for other instances with different value od info=""

Use ng-repeat on apps to display the four :P Self work, nothing learnt

Create new directive in installApp.js again Self work :)
Added a 4th option in the directive of installApp
link: function(scope, element, attrs) {
      scope.buttonText = "Install",
      scope.installed = false,
      scope.download = function() {
        element.toggleClass('btn-active');
        if(scope.installed) {
          scope.buttonText = "Install";
          scope.installed = false;
        } else {
          scope.buttonText = "Uninstall";
          scope.installed = true;
        }
      }
    }
It also contains a fourth option link. The link is used to create interactive directives that respond to user actions.
The link function takes three inputs:

scope refers to the directive's scope. Any new properties attached to $scope will become available to use in the directive's template.
element refers to the directive's HTML element.
attrs contains the element's attributes.
Inside the link function, there are two properties buttonText and installed, and the function download(). We'll use these in the directive's template next.

In js/directives/installApp.html
<button class="btn btn-active" ng-click="download()"> {{ buttonText }}</button>

Add <install-app></install-app> after <app-info> in index.html

Directives are a powerful way to create self-contained, interactive components. Unlike jQuery which adds interactivity as a layer on top of HTML, AngularJS treats interactivity as a native component of HTML.

To run local sever:
copy folder to /var/www/html/
$ service apache2 restart
go to localhost/<folder name>

cat /var/log/apache2/error.log to check errors while running server

USING SERVICES

in js/services/forecast:
app.factory('forecast', ['$http', function($http) {       //We used app.factory to create a new service named forecast. forecast service needs to use AngularJS's built-in $http to fetch JSON from the server. Therefore, we add $http to the forecast service as a dependency.
  return $http.get('https://s3.amazonaws.com/codecademy-content/courses/ltp4/forecast-api/forecast.json') //Then, inside forecast, we use $http to construct an HTTP GET request for the weather data. If the request succeeds, the weather data is returned; otherwise the error info is returned.
            .success(function(data) { 
              return data; 
            }) 
            .error(function(err) { 
              return err; 
            }); 
}]);
// First we added forecast into MainController as a dependency so that it's available to use. Then within the controller we used forecast to asynchronously fetch the weather data from the server and store it into $scope.fiveDay
//any properties attached to $scope become available to use in the view. This means in index.html, we can display the city_name using an expression as done before.

include it in the html file

in MainController:
app.controller('MainController', ['$scope', 'forecast', function($scope, forecast) {
  forecast.success(function(data) {
    $scope.fiveDay = data;
  });
}]);


ROUTING
add <div ng-view></div> in html

in js/app.js
var app = angular.module('GalleryApp', ['ngRoute']);
app.config(function ($routeProvider){ // inside the app.config() method, we use Angular's $routeProvider to define the application routes.
  $routeProvider
    .when('/', {                            //We used .when() to map the URL / to to the controller HomeController and the template home.html. The HomeController uses the service js/services/photos.js to fetch the array of all photos from https://s3.amazonaws.com/codecademy-content/courses/ltp4/photos-api/photos.json and stores it into $scope.photos. The home.html uses ng-repeat to loop through each item in the photos array and display each photo.
      controller: 'HomeController',
      templateUrl: 'views/home.html'
    })
    .otherwise({              //Otherwise if a user accidentally visits a URL other than /, we just redirect to / using .otherwise().
      redirectTo: '/'
    });
});
//Now when a user visits /, a view will be constructed by injecting home.html into the <div ng-view></div> in index.html.

Adding another .when()
.when('/photos/:id',{
      controller: 'PhotoController',        //In PhotoController, we used Angular's $routeParams to retrieve id from the URL by using $routeParams.id. Notice that we injected both $routeParams and the photos service into the PhotoController dependency array to make them available to use inside the controller.
      // Then to fetch an individual photo, we first used the photos service to fetch the array of photos from the server, and then used $routeParams.id to access the specific photo by its index.
      templateUrl: 'views/photo.html'
    })
//As before, any properties attached to $scope become available to use in the view. This means in photo.html, we can display the photo's detail using expressions as done before.

Notice that when you click on links, the app doesn't do a full reload. Only the part of the view specified by <div ng-view></div> changes.

Finish the photos.html template
